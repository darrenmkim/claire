

(comment
 "
(def deals
  [(make-deal 1 "DEALIRSMOCK" :irs (frm/make-date 2020 1 1)
              (frm/make-date 2020 1 3) (frm/make-date 2025 1 3) (frm/make-date 2025 1 3))
   (make-deal 2 "DEALIRSMOCK" :irs (frm/make-date 2020 1 1)
              (frm/make-date 2020 1 3) (frm/make-date 2025 1 3) (frm/make-date 2025 1 3))
   (make-deal 3 "DEALIRSMOCK" :irs (frm/make-date 2020 1 1)
              (frm/make-date 2020 1 3) (frm/make-date 2025 1 3) (frm/make-date 2025 1 3))
   (make-deal 4 "DEALIRSMOCK" :irs (frm/make-date 2020 1 1)
              (frm/make-date 2020 1 3) (frm/make-date 2025 1 3) (frm/make-date 2025 1 3))])
   
(def legs
  [(make-leg 1 "ABCIRSFIX" 1 :irs-fixed :payer :usd :usd
             :semiannually :dc-30-360 1000000.0 :libor 2.0)
   (make-leg 2 "ABCIRSFLT" 1 :irs-float :receiver :usd :usd
             :semiannually :dc-30-360 1000000.0 :libor nil)])

(def accounts
  [(make-account 1 "Cash" 1111 "Cash Clearing Account")
   (make-account 2 "Receivable" 1121 "Derivative Receivable")
   (make-account 3 "Payable" 2121 "Derivative Payble")
   (make-account 4 "Income" 3111 "Derivative Income")
   (make-account 5 "Realized GL" 5111 "Cash Clearing Account")])

(def presets
  [(make-preset 1 :irs-fixed :int-pay "irs fixed int pay cash" 1 :n)
   (make-preset 2 :irs-fixed :int-pay "irs fixed int pay income" 3 :p)
   (make-preset 3 :irs-fixed :int-receive "irs fixed int receive cash" 1 :p)
   (make-preset 4 :irs-fixed :int-receive "irs fixed int receive income" 2 :n)
   (make-preset 5 :irs-float :pay "irs fixed int pay cash" 1 :n)
   (make-preset 6 :irs-float :pay "irs fixed int pay income" 2 :p)
   (make-preset 7 :irs-float :receive "irs fixed int receive cash" 1 :p)
   (make-preset 8 :irs-float :receive "irs fixed int receive income" 2 :n)])

(def rolls
  [(rll/make-roll 1 :calc (frm/make-date 2020 3 1) (frm/make-date 2020 3 31))
   (rll/make-roll 2 :revert (frm/make-date 2020 3 1) (frm/make-date 2020 3 31))
   (rll/make-roll 3 :calc (frm/make-date 2020 3 1) (frm/make-date 2020 3 31))
   (rll/make-roll 4 :post (frm/make-date 2020 3 1) (frm/make-date 2020 3 31))])

(def rates
  [(make-rate 1 (frm/make-date 2020 2 25) :libor 2.5)
   (make-rate 2 (frm/make-date 2020 8 25) :libor 2.5)
   (make-rate 3 (frm/make-date 2021 2 25) :libor 2.5)
   (make-rate 4 (frm/make-date 2021 8 25) :libor 2.5)
   (make-rate 5 (frm/make-date 2022 2 25) :libor 2.5)
   (make-rate 6 (frm/make-date 2022 8 25) :libor 2.5)
   (make-rate 7 (frm/make-date 2023 2 25) :libor 2.5)
   (make-rate 8 (frm/make-date 2023 8 25) :libor 2.5)
   (make-rate 9 (frm/make-date 2024 2 25) :libor 2.5)
   (make-rate 10 (frm/make-date 2024 8 25) :libor 2.5)
   (make-rate 11 (frm/make-date 2025 2 25) :libor 2.5)
   (make-rate 12 (frm/make-date 2025 8 25) :libor 2.5)
   (make-rate 13 (frm/make-date 2026 2 25) :libor 2.5)
   (make-rate 14 (frm/make-date 2026 8 25) :libor 2.5)
   (make-rate 15 (frm/make-date 2027 2 25) :libor 2.5)
   (make-rate 16 (frm/make-date 2027 8 25) :libor 2.5)])
")


(defn find-mature [leg]
  (:mature
   (port/find-single mock/deals
                     :id
                     (:deal-id leg))))

(defn find-months [leg]
  (:months
   ((:freq leg) dm/freqs)))

(defn find-frac [leg]
  (:frac ((:freq leg) dm/freqs)))

(defn find-event [leg]
  ((:stance leg) dm/stance-to-event))

(defn calc-interest-cash [leg date]
  (let [pact (:pact leg)
        notional (:notional leg)
        months (find-months leg)
        frac (find-frac leg)
        rate (case pact
                 :irs-fixed (:fixed-r leg)
                 :irs-float (port/find-rate date (:rate-c leg)))
        amount (* notional (/ rate 100.0) frac)
        annote (str notional "*(" rate "/100)*" "(" months "/12)" "=" amount)]
    {:amount amount :annote annote}))
  
(defn interim-jour [roll leg tran-id tran-amount date]
  (let [pact (:pact leg)
        event (find-event leg)
        roll-id (:id roll)
        presets (port/find-presets pact event)]
    (for [preset presets]
      (dm/make-journal nil tran-id (:account-id preset)
                    (dm/num-by-sign tran-amount (:sign preset))
                    roll-id))))

(defn interim-tran [roll leg date]
  (let [roll-id (:id roll)
        leg-id (:id leg)
        notional (:notional leg)
        contracts (:contract leg)
        frac (find-frac leg)
        event (find-event leg)
        months (find-months leg)
        calc (calc-interest-cash leg date)
        amount (:amount calc)
        annote (:annote calc)]
    (dm/make-tran nil date leg-id event contracts amount amount annote roll-id)))

(defn interim [roll leg start]
  (let [mature (find-mature leg)
        months (find-months leg)
        new-start (t/plus start (t/months months))
        tran (interim-tran roll leg start)
        tran-id (:id tran)
        tran-amount (:base-amt tran)
        jour (interim-jour roll leg tran-id tran-amount start)
        tj {:tran tran :jour jour}]
    (if (t/after? start mature)
      '()
      (cons tj
            (interim roll leg new-start)))))


(defn initial-tran []
  )

(defn final []

  )


(defn initial [roll leg start]
  (let [pact (:pact leg)]
    (case pact
      :irs-fixed '()
      :irs-float '()
      :fxf-side '()
      :cll-buy (initial-tran )
      :cll-sell (initial-tran ))))


(defn route [roll leg start]
  (let [pact (:pact leg)]
    (case pact
      :irs-fixed (interim roll leg start)
      :irs-float (interim roll leg start)
      :fxf-side (final)
      :cll-sell (cons (initial roll leg start) (final))
      :cll-buy (cons (initial roll leg start) (final)))))

;; test 
(def start (dm/make-date 2020 02 25))
(def roll (first mock/rolls))
(def leg (first mock/legs))
(def cash-test (interim roll leg start))
(def cash-count {:count "abc"})





(defrecord leg [id name deal-id pact stance base-cur local-cur freq conv notional rate-c fixed-r])
(defn make-leg [id name deal-id pact stance base-cur local-cur freq conv notional rate-c fixed-r]
  (->leg id name deal-id pact stance base-cur local-cur freq conv notional rate-c fixed-r))

(defrecord deal [id name breed trade effect mature terminate])
(defn make-deal [id name breed trade effect mature terminate]
  (->deal id name breed trade effect mature terminate))

;;; RATE ;;;


(def rate-codes #{:libor :euribor})


(defrecord rate [id date code percent])
(defn make-rate [id date code percent]
  (->rate id date code percent))

;;; ACCOUNT ;;;

(defrecord account [id name number desc])
(defn make-account [id name number desc]
  (->account id name number desc))


(defn num-by-sign [num sign]
  (case sign :p num :n (- 0 num)))

;;; TRAN & JOURNAL ;;;

(defrecord tran [id date leg-id event contracts base-amt local-amt annote roll-id])
(defn make-tran [id date leg-id event contracts base-amt local-amt annote roll-id]
  (->tran id date leg event contracts base-amt local-amt annote roll-id))
  
(defrecord journal [id tran-id account-id amount roll-id])
(defn make-journal [id tran-id account-id amount roll-id]
  (->journal id tran-id account-id amount roll-id))


